WEBVTT

1
00:00:04.730 --> 00:00:09.210
Welcome to this introductory
course on AWS DeepLens.

2
00:00:09.210 --> 00:00:11.220
The world's first deep learning

3
00:00:11.220 --> 00:00:13.935
enabled video camera
for developers.

4
00:00:13.935 --> 00:00:16.140
I'm Jyothi Nookula and I'm

5
00:00:16.140 --> 00:00:19.230
a senior product manager
on the DeepLens team.

6
00:00:19.230 --> 00:00:21.570
Today, I'll show you how to get

7
00:00:21.570 --> 00:00:24.735
started building AWS
DeepLens projects.

8
00:00:24.735 --> 00:00:26.955
We'll look at the
device's hardware,

9
00:00:26.955 --> 00:00:30.555
the architecture, and some
sample project templates.

10
00:00:30.555 --> 00:00:34.440
At the end, I'll demonstrate
building a project using

11
00:00:34.440 --> 00:00:36.420
the object detection
template from

12
00:00:36.420 --> 00:00:40.200
the AWS DeepLens console.
Let's get started.

13
00:00:40.200 --> 00:00:42.860
At Amazon, we have
been working on

14
00:00:42.860 --> 00:00:45.245
machine learning for 20 years.

15
00:00:45.245 --> 00:00:47.750
We know there's no
easy way for you

16
00:00:47.750 --> 00:00:50.330
as a developer to learn
machine learning,

17
00:00:50.330 --> 00:00:52.955
and test and
prototype your ideas.

18
00:00:52.955 --> 00:00:55.070
So we decided to
put deep learning

19
00:00:55.070 --> 00:00:57.365
into your hands literally.

20
00:00:57.365 --> 00:01:01.400
AWS DeepLens is a wireless
enabled video camera

21
00:01:01.400 --> 00:01:03.605
and a development platform that's

22
00:01:03.605 --> 00:01:06.170
integrated with the AWS Cloud.

23
00:01:06.170 --> 00:01:08.165
It lets you use the latest

24
00:01:08.165 --> 00:01:10.130
artificial intelligence tools and

25
00:01:10.130 --> 00:01:13.400
technology to develop
computer vision applications

26
00:01:13.400 --> 00:01:15.500
based on deep learning models.

27
00:01:15.500 --> 00:01:17.780
Before we start
building projects,

28
00:01:17.780 --> 00:01:19.985
let's take a look at
the actual device.

29
00:01:19.985 --> 00:01:23.655
What makes our AWS DeepLens
stand apart is the on-board

30
00:01:23.655 --> 00:01:25.820
accelerator that is capable of

31
00:01:25.820 --> 00:01:29.045
delivering 100
gigaflops of compute,

32
00:01:29.045 --> 00:01:33.560
which means it can run 100
billion operations per second.

33
00:01:33.560 --> 00:01:35.555
So how do you take this device

34
00:01:35.555 --> 00:01:37.370
and actually build something?

35
00:01:37.370 --> 00:01:39.410
For that, you need to understand

36
00:01:39.410 --> 00:01:43.210
the general workflow for an
AWS DeepLens deployment.

37
00:01:43.210 --> 00:01:46.635
To create and run an
AWS DeepLens project,

38
00:01:46.635 --> 00:01:49.415
you typically use
Amazon SageMaker,

39
00:01:49.415 --> 00:01:52.655
AWS lambda, and AWS green grass.

40
00:01:52.655 --> 00:01:56.825
You'd use Amazon SageMaker
to train and validate

41
00:01:56.825 --> 00:01:58.775
a custom machine learning model

42
00:01:58.775 --> 00:02:02.090
or you could import
a pre-trained model.

43
00:02:02.090 --> 00:02:04.970
AWS lambda functions in DeepLens

44
00:02:04.970 --> 00:02:07.745
perform three
important operations.

45
00:02:07.745 --> 00:02:09.235
Pre-processing,

46
00:02:09.235 --> 00:02:12.545
capturing inference,
and displaying output.

47
00:02:12.545 --> 00:02:15.445
Once a project is
deployed to DeepLens,

48
00:02:15.445 --> 00:02:17.180
the model and the lambda function

49
00:02:17.180 --> 00:02:20.035
can run locally on the device.

50
00:02:20.035 --> 00:02:22.365
AWS DeepLens creates

51
00:02:22.365 --> 00:02:24.814
a computer vision
application project

52
00:02:24.814 --> 00:02:28.510
that consists of the model and
inference lambda function.

53
00:02:28.510 --> 00:02:31.020
AWS Green grass can deploy

54
00:02:31.020 --> 00:02:35.309
the project and a lambda
run-time to your AWS DeepLens,

55
00:02:35.309 --> 00:02:39.085
as well as the software
or configuration updates.

56
00:02:39.085 --> 00:02:41.510
This diagram illustrates how

57
00:02:41.510 --> 00:02:43.570
these services come together.

58
00:02:43.570 --> 00:02:45.985
First, when turned on,

59
00:02:45.985 --> 00:02:49.375
AWS DeepLens captures
a video stream,

60
00:02:49.375 --> 00:02:52.310
it produces two output streams.

61
00:02:52.310 --> 00:02:55.070
The device stream, which
is the video stream

62
00:02:55.070 --> 00:02:58.985
passed through without processing
and the project stream,

63
00:02:58.985 --> 00:03:00.920
which contains the results of

64
00:03:00.920 --> 00:03:04.000
the model's processing
video frames.

65
00:03:04.000 --> 00:03:07.160
From there, the inference
lambda function

66
00:03:07.160 --> 00:03:09.980
receives unprocessed
video frames and

67
00:03:09.980 --> 00:03:12.590
then passes those
unprocessed frames to

68
00:03:12.590 --> 00:03:15.995
the project's deep learning
model for processing.

69
00:03:15.995 --> 00:03:19.550
Finally, the inference
lambda function receives

70
00:03:19.550 --> 00:03:21.560
the process frames back from

71
00:03:21.560 --> 00:03:25.370
the model and passes them
on in the project stream.

72
00:03:25.370 --> 00:03:28.015
We don't really show
it in the diagram,

73
00:03:28.015 --> 00:03:29.930
but AWS DeepLens is well

74
00:03:29.930 --> 00:03:32.975
integrated with
other AWS services.

75
00:03:32.975 --> 00:03:36.679
For instance, projects
deployed to AWS DeepLens

76
00:03:36.679 --> 00:03:40.505
are securely transferred
using AWS Greengrass.

77
00:03:40.505 --> 00:03:43.045
The output of AWS DeepLens

78
00:03:43.045 --> 00:03:44.985
when connected to the Internet,

79
00:03:44.985 --> 00:03:47.730
can be sent back
to the console via

80
00:03:47.730 --> 00:03:52.245
AWS IoT and Amazon
Kinesis video streams.

81
00:03:52.245 --> 00:03:56.010
So now, we're ready to
start building, right?

82
00:03:56.010 --> 00:03:58.970
The reality is, most
of us don't have

83
00:03:58.970 --> 00:04:02.555
the skills to build a convolutional
neural network model.

84
00:04:02.555 --> 00:04:04.910
That's why AWS DeepLens

85
00:04:04.910 --> 00:04:07.789
offers ready to deploy
sample projects,

86
00:04:07.789 --> 00:04:09.710
which include a pre-trained

87
00:04:09.710 --> 00:04:12.050
convolutional neural
network model

88
00:04:12.050 --> 00:04:14.750
and the corresponding
inference function.

89
00:04:14.750 --> 00:04:16.775
AWS DeepLens offers

90
00:04:16.775 --> 00:04:20.030
seven sampled project
templates ready-to-use,

91
00:04:20.030 --> 00:04:23.025
including templates such
as object detection,

92
00:04:23.025 --> 00:04:24.540
hot dog/not hot dog,

93
00:04:24.540 --> 00:04:26.475
artistic style transfer,

94
00:04:26.475 --> 00:04:29.540
activity recognition,
and face detection.

95
00:04:29.540 --> 00:04:31.549
With these sample projects,

96
00:04:31.549 --> 00:04:32.870
you can get started with

97
00:04:32.870 --> 00:04:35.840
machine learning in
less than 10 minutes.

98
00:04:35.840 --> 00:04:40.195
These templated projects
can be edited and extended.

99
00:04:40.195 --> 00:04:42.260
For instance, you could use

100
00:04:42.260 --> 00:04:44.540
the object detection
project template

101
00:04:44.540 --> 00:04:46.580
to recognize when your dog is

102
00:04:46.580 --> 00:04:49.520
sitting on your couch
and have the application

103
00:04:49.520 --> 00:04:53.075
send you an SMS to notify
you of this event.

104
00:04:53.075 --> 00:04:56.080
Of course, you can
also create, train,

105
00:04:56.080 --> 00:04:59.750
and deploy your own custom
model to AWS DeepLens.

106
00:04:59.750 --> 00:05:02.600
The development platform
supports a variety of

107
00:05:02.600 --> 00:05:04.385
deep learning
frameworks including

108
00:05:04.385 --> 00:05:06.830
MXNet, TensorFlow, and Caffe.

109
00:05:06.830 --> 00:05:09.290
Now, let's take it for a spin.

110
00:05:09.290 --> 00:05:12.155
We'll deploy the object
detection project.

111
00:05:12.155 --> 00:05:13.460
The project uses

112
00:05:13.460 --> 00:05:16.370
the single shot multi
box detective framework

113
00:05:16.370 --> 00:05:20.855
to detect objects with a
pre-trained resonate 15 network.

114
00:05:20.855 --> 00:05:22.850
The network has been trained on

115
00:05:22.850 --> 00:05:25.070
the Pascal VOC dataset and

116
00:05:25.070 --> 00:05:28.085
can recognize 20
different objects.

117
00:05:28.085 --> 00:05:32.299
The model takes the video
stream from your AWS DeepLens

118
00:05:32.299 --> 00:05:36.575
as input and labels the
objects that it identifies.

119
00:05:36.575 --> 00:05:39.650
It's a pre-trained
optimized model that

120
00:05:39.650 --> 00:05:43.135
is ready to be deployed
to your AWS DeepLens.

121
00:05:43.135 --> 00:05:46.830
After deploying it, you
can review the objects

122
00:05:46.830 --> 00:05:48.815
your AWS DeepLens recognizes

123
00:05:48.815 --> 00:05:50.855
around you through the console.

124
00:05:50.855 --> 00:05:53.540
Let's see what it
looks like in action.

125
00:05:53.540 --> 00:05:57.095
I'm starting here in the
AWS management console.

126
00:05:57.095 --> 00:05:58.560
In the search bar,

127
00:05:58.560 --> 00:06:01.780
I'm going to type DeepLens.

128
00:06:05.540 --> 00:06:09.005
Now, we're looking at
the project screen.

129
00:06:09.005 --> 00:06:11.425
If you don't see the
project list view,

130
00:06:11.425 --> 00:06:13.080
click on the
''Hamburger menu'' on

131
00:06:13.080 --> 00:06:16.510
the left and select projects.

132
00:06:18.710 --> 00:06:23.650
Select "Create new
project" on the top right,

133
00:06:24.500 --> 00:06:30.345
choose "User project template"
and "Object detection",

134
00:06:30.345 --> 00:06:33.750
and scroll down the
screen to choose next.

135
00:06:33.750 --> 00:06:36.495
I'm going to accept
the default values,

136
00:06:36.495 --> 00:06:39.975
scroll to the bottom
and select "Create".

137
00:06:39.975 --> 00:06:41.720
It can take a few moments for

138
00:06:41.720 --> 00:06:44.255
the project creation
to fully complete.

139
00:06:44.255 --> 00:06:47.060
You can verify that the
project was created

140
00:06:47.060 --> 00:06:50.915
successfully once the
description field has a value.

141
00:06:50.915 --> 00:06:52.340
You may need to refresh

142
00:06:52.340 --> 00:06:56.180
your browser window if this
value isn't populating.

143
00:06:56.180 --> 00:06:58.865
Now that the fields
are populated,

144
00:06:58.865 --> 00:07:00.650
choose the radio button for

145
00:07:00.650 --> 00:07:04.410
the project and select
deploy to device.

146
00:07:05.150 --> 00:07:07.905
On the target device screen,

147
00:07:07.905 --> 00:07:12.815
choose your device from the
list and select review.

148
00:07:12.815 --> 00:07:15.530
Now, it's time to
review the details of

149
00:07:15.530 --> 00:07:19.200
the deployment and
select "Deploy".

150
00:07:21.580 --> 00:07:24.530
The process to
deploy the model to

151
00:07:24.530 --> 00:07:27.530
your DeepLens can
take a few minutes.

152
00:07:27.530 --> 00:07:29.960
You will know that
it is completed

153
00:07:29.960 --> 00:07:32.935
when the blue banner
changes to green.

154
00:07:32.935 --> 00:07:35.430
In the project output tab,

155
00:07:35.430 --> 00:07:39.920
copy the unique topic
for your AWS DeepLens.

156
00:07:39.920 --> 00:07:50.140
Choose AWS IoT console and
paste the unique topic,

157
00:07:51.610 --> 00:07:55.290
to subscribe to a topic.

158
00:07:55.400 --> 00:07:59.150
You can review the results
of DeepLens detecting

159
00:07:59.150 --> 00:08:00.980
different objects in the room and

160
00:08:00.980 --> 00:08:03.275
printing the
confidence code tool.

161
00:08:03.275 --> 00:08:06.655
Notice, as I change what
the DeepLens can see,

162
00:08:06.655 --> 00:08:09.970
it will report that at
the bottom of the screen.

163
00:08:14.660 --> 00:08:18.130
Now, let's change it to a bottle.

164
00:08:26.960 --> 00:08:31.425
Now, you have seen the
power of DeepLens.

165
00:08:31.425 --> 00:08:33.945
I'm Jyothi Nookula with AWS.

166
00:08:33.945 --> 00:08:36.100
Thanks for watching.