WEBVTT

1
00:00:00.500 --> 00:00:02.478
Welcome to this introductory
course on Amazon Translate.

2
00:00:02.478 --> 00:00:08.000
I'm Tom Kelly, and I'm excited to walk you
through this overview of Amazon Translate.

3
00:00:08.000 --> 00:00:11.781
Over the next few minutes, I'll highlight
the services features and benefits,

4
00:00:11.781 --> 00:00:14.681
talk about how it works and
how you can get started using it, and

5
00:00:14.681 --> 00:00:16.744
walk through some of
the popular use cases.

6
00:00:16.744 --> 00:00:19.968
I've also included some demos
throughout the course, so

7
00:00:19.968 --> 00:00:24.044
you can get a concrete look at how to
connect to the Amazon Translate API and

8
00:00:24.044 --> 00:00:27.500
see some examples of applications
built around the service.

9
00:00:28.500 --> 00:00:32.257
Amazon Translate is a neural machine
translation service powered by deep

10
00:00:32.257 --> 00:00:34.257
learning models that allow for fast and

11
00:00:34.257 --> 00:00:37.178
accurate translation
supporting multiple languages.

12
00:00:37.178 --> 00:00:41.614
It's a continually train solution that
allows you to perform batch translations

13
00:00:41.614 --> 00:00:45.663
when you have large volumes of
pre-existing text as well as real-time and

14
00:00:45.663 --> 00:00:49.840
on-demand translations when you want
to deliver content as a feature of your

15
00:00:49.840 --> 00:00:51.300
application.

16
00:00:51.300 --> 00:00:54.800
Amazon Translate offers secure
communication between the service and

17
00:00:54.800 --> 00:00:57.500
your applications through SSL encryption.

18
00:00:57.500 --> 00:01:00.800
Any content processed by
Amazon Translate is encrypted and

19
00:01:00.800 --> 00:01:05.099
stored at rest in the AWS region
where you're using the services.

20
00:01:05.099 --> 00:01:08.200
Additionally, you can ensure that
information is kept secure and

21
00:01:08.200 --> 00:01:13.100
confidential by controlling access to
Amazon Translate through AWS identity and

22
00:01:13.100 --> 00:01:15.600
access management policies.

23
00:01:15.600 --> 00:01:20.200
As an AWS service, Amazon Translate
integrates nicely with several other AWS

24
00:01:20.200 --> 00:01:24.400
services such as Amazon Polly for
translated speech-enabled products,

25
00:01:24.400 --> 00:01:29.400
Amazon Comprehend for analysis of
translated text, and Amazon Transcribe for

26
00:01:29.400 --> 00:01:32.400
localized captioning of
your media products.

27
00:01:32.400 --> 00:01:35.400
And with Amazon Translate,
you only pay for what you use.

28
00:01:35.400 --> 00:01:38.469
You are charged based on the total
number of characters sent to the API for

29
00:01:38.469 --> 00:01:39.130
translation.

30
00:01:39.130 --> 00:01:43.600
Now let's talk about some of
the benefits of Amazon Translate.

31
00:01:43.600 --> 00:01:47.700
As a developer, you no longer need to
manually extend your applications with new

32
00:01:47.700 --> 00:01:50.200
languages that meet your customer base.

33
00:01:50.200 --> 00:01:54.526
Instead, Amazon Translate allows you to
create applications that can be used in

34
00:01:54.526 --> 00:01:55.357
any language.

35
00:01:55.357 --> 00:01:57.901
And you can do this with
only a few lines of code.

36
00:01:57.901 --> 00:01:59.388
In just a minute,

37
00:01:59.388 --> 00:02:05.500
I'll walk you through calling the API
from both the AWS CLI and AWS SDKs.

38
00:02:05.500 --> 00:02:09.500
If you're already an AWS customer and
you're looking for a translation solution,

39
00:02:09.500 --> 00:02:14.400
it's convenient to stay within the AWS
ecosystem for easier integration with

40
00:02:14.400 --> 00:02:17.700
other applications and for
more efficient security of your data.

41
00:02:17.700 --> 00:02:20.300
But it's not just about ease and
efficiency.

42
00:02:20.300 --> 00:02:24.179
Amazon Translate, powered by a neural
machine translation engine, offers

43
00:02:24.179 --> 00:02:28.300
increased accuracy of translation when
compared to traditional statistical and

44
00:02:28.300 --> 00:02:30.104
rule-based translation models.

45
00:02:30.104 --> 00:02:33.980
Here's an example of a customer
review of a pocket knife in German,

46
00:02:33.980 --> 00:02:38.700
translated to English using a non-neural
machine translation engine.

47
00:02:38.700 --> 00:02:43.100
As you can see, you get the gist of the
review but lots of areas need improvement.

48
00:02:43.100 --> 00:02:46.372
Here's that same review, but this time,
we've run it through Amazon Translate.

49
00:02:46.372 --> 00:02:49.525
As you can see, there are a couple
minor areas to clean up.

50
00:02:49.525 --> 00:02:53.400
But overall,
it's a much more accurate translation.

51
00:02:53.400 --> 00:02:57.200
Amazon Translate is based on neural
networks that have been trained on various

52
00:02:57.200 --> 00:03:02.100
language pairs enabling the engine to
translate between two different languages.

53
00:03:02.100 --> 00:03:05.659
The model is made up of two components,
the encoder and the decoder.

54
00:03:05.659 --> 00:03:09.191
The encoder reads the source
sentence one word at a time and

55
00:03:09.191 --> 00:03:14.400
constructs a semantic representation that
captures the meaning of the source text.

56
00:03:14.400 --> 00:03:18.633
Amazon Translate uses attention
mechanisms to understand context and

57
00:03:18.633 --> 00:03:22.300
decide which of those words in
the source are most relevant for

58
00:03:22.300 --> 00:03:24.362
generating the next target word.

59
00:03:24.362 --> 00:03:28.130
One of the main advantages of
the attention mechanism is to enable

60
00:03:28.130 --> 00:03:32.585
the decoder to shift focus on certain
parts of the source sentence to make sure

61
00:03:32.585 --> 00:03:36.800
that ambiguous words or
phrases are translated correctly.

62
00:03:36.800 --> 00:03:40.800
The decoder uses the semantic
representation and the attention mechanism

63
00:03:40.800 --> 00:03:44.900
to generate a translation one word
at a time in the target language.

64
00:03:44.900 --> 00:03:47.557
It may sound complex, but
it's all happening under the hood.

65
00:03:47.557 --> 00:03:50.116
Amazon Translate takes care
of the details for you.

66
00:03:50.116 --> 00:03:52.700
Getting started with the service
just takes a few steps.

67
00:03:53.700 --> 00:03:58.047
You should first make sure that you have
an AWS account and that you've created and

68
00:03:58.047 --> 00:04:01.908
assigned an IAM role with full access
to all Amazon Translate API calls.

69
00:04:01.908 --> 00:04:06.500
Then you have three ways to
connect to Amazon Translate,

70
00:04:06.500 --> 00:04:11.800
the Management Console,
the AWS CLI, and the AWS SDKs.

71
00:04:11.800 --> 00:04:15.327
Let's first look at connecting to the
service from the AWS Management Console.

72
00:04:15.327 --> 00:04:17.639
Once you've logged into the console,

73
00:04:17.639 --> 00:04:22.000
find your way to Amazon Translate
under the list of AWS services.

74
00:04:22.000 --> 00:04:25.800
From within the service console, you
can immediately start translating text,

75
00:04:25.800 --> 00:04:28.200
just choose the source and
target language and

76
00:04:28.200 --> 00:04:31.800
then enter the text you want translated
in the source language text box.

77
00:04:32.800 --> 00:04:37.700
The translated text appears immediately in
the target language text box on the right.

78
00:04:37.700 --> 00:04:40.500
Below, you can see
the corresponding JSON input and

79
00:04:40.500 --> 00:04:43.400
output to the translate text operation.

80
00:04:43.400 --> 00:04:46.200
If you're going to use the command
line to connect to the service, first,

81
00:04:46.200 --> 00:04:49.000
make sure you've set up the AWS CLI.

82
00:04:49.000 --> 00:04:50.114
Once that's done,

83
00:04:50.114 --> 00:04:54.056
you can use the CLI in two ways to
translate text with Amazon Translate.

84
00:04:54.056 --> 00:04:58.517
For short text, you can provide the text
that you want to translate as a parameter

85
00:04:58.517 --> 00:05:00.300
of the translate text command.

86
00:05:02.000 --> 00:05:06.000
For longer text, you can provide
the source language, target language, and

87
00:05:06.000 --> 00:05:07.600
text in a JSON file.

88
00:05:07.600 --> 00:05:11.274
You can also use
Amazon Translate via AWS SDKs.

89
00:05:11.274 --> 00:05:15.452
Here's an example in Python where we
call the translate text operation and

90
00:05:15.452 --> 00:05:19.578
pass the source text along with
the source language and target language.

91
00:05:19.578 --> 00:05:23.083
In general, Amazon Translate is
the right solution when you need

92
00:05:23.083 --> 00:05:27.200
to translate high volume of content and
you need to do it quickly.

93
00:05:27.200 --> 00:05:31.729
Most use cases fall under one of two main
categories, translating web-authored

94
00:05:31.729 --> 00:05:35.995
content for localization purposes,
either on-demand or in real time, and

95
00:05:35.995 --> 00:05:40.085
batch translating pre-existing content for
analysis and insights,.

96
00:05:40.085 --> 00:05:42.884
Let's look at a few specific examples.

97
00:05:42.884 --> 00:05:47.123
Here, we have a mock vintage car website
where users can post reviews of cars

98
00:05:47.123 --> 00:05:48.392
they've purchased.

99
00:05:48.392 --> 00:05:53.075
As you can see, reviews on this particular
car have been submitted in Spanish.

100
00:05:53.075 --> 00:05:56.713
If I want to read a review in English,
I can just choose Translate, and

101
00:05:56.713 --> 00:05:59.428
then the English version
of that review displays.

102
00:05:59.428 --> 00:06:03.038
Let's look at the architecture behind
this application to better see what's

103
00:06:03.038 --> 00:06:03.867
happening here.

104
00:06:03.867 --> 00:06:07.745
This website is a single-page
JavaScript application hosted in

105
00:06:07.745 --> 00:06:11.489
a public S3 bucket and
delivered through Amazon CloudFront.

106
00:06:11.489 --> 00:06:15.614
The web page makes rest API
calls using Amazon API Gateway,

107
00:06:15.614 --> 00:06:18.598
which invokes various lambda functions.

108
00:06:18.598 --> 00:06:23.263
These functions trigger Amazon Translate
to execute translations.

109
00:06:23.263 --> 00:06:27.051
Amazon Comprehend analyzes
the sentiment of the review,

110
00:06:27.051 --> 00:06:30.691
Amazon Aurora as the main
database of the application.

111
00:06:30.691 --> 00:06:35.427
So while there's a lot going on here
in terms of translation, all of that

112
00:06:35.427 --> 00:06:40.102
was taken care of with just one line
of Python code in a lambda function.

113
00:06:40.102 --> 00:06:43.265
Here's another example of
Amazon Translate, this time for

114
00:06:43.265 --> 00:06:44.512
chatbot translation.

115
00:06:44.512 --> 00:06:46.296
Here's the application.

116
00:06:46.296 --> 00:06:50.498
You can start by announcing the source and
target language at the bottom.

117
00:06:50.498 --> 00:06:54.154
Once that's all set,
you can type words in English and

118
00:06:54.154 --> 00:06:57.030
see the corresponding French on the left.

119
00:06:57.030 --> 00:07:00.479
Let's see what's happening here
from an architectural perspective.

120
00:07:00.479 --> 00:07:05.131
The app is hosted in Amazon S3 and
delivered through Amazon CloudFront.

121
00:07:05.131 --> 00:07:09.427
Amazon Lex interacts with the user
requests for translations.

122
00:07:09.427 --> 00:07:13.649
And AWS Lambda retrieves past
translations from DynamoDB and

123
00:07:13.649 --> 00:07:18.531
requests new translations,
which are provided by Amazon Translate.

124
00:07:18.531 --> 00:07:23.309
The last example I want to show you uses
Amazon Translate for batch translations.

125
00:07:23.309 --> 00:07:27.010
This batch of documents
is hosted in S3 bucket.

126
00:07:27.010 --> 00:07:31.609
To translate, simply indicate the source
bucket as well as a target S3 bucket.

127
00:07:31.609 --> 00:07:37.036
Working within a limit of 1,000 bytes
of UTF-8 characters per request,

128
00:07:37.036 --> 00:07:40.365
this application performs
two main functions.

129
00:07:40.365 --> 00:07:45.208
First, there's a function that breaks the
source string into individual sentences.

130
00:07:45.208 --> 00:07:49.676
And then there's the main function
which calls the translate operation for

131
00:07:49.676 --> 00:07:51.856
each sentence in the source string.

132
00:07:51.856 --> 00:07:56.061
This function also handles
authentication with Amazon Translate.

133
00:07:56.061 --> 00:07:56.872
Before I wrap up,

134
00:07:56.872 --> 00:08:00.451
I want to summarize some of the salient
points from this service introduction.

135
00:08:00.451 --> 00:08:05.364
Amazon Translate represents the next
generation of translation solutions.

136
00:08:05.364 --> 00:08:09.610
It's built on a neural network that
leverages deep learning techniques.

137
00:08:09.610 --> 00:08:13.093
Unlike conventional phrase-based
machine translation,

138
00:08:13.093 --> 00:08:17.736
Amazon Translate takes into account the
entire context of the source sentence as

139
00:08:17.736 --> 00:08:20.887
well as the translation it
has previously generated.

140
00:08:20.887 --> 00:08:23.982
This results in more accurate and
fluid translation.

141
00:08:23.982 --> 00:08:28.548
Amazon Translate is ideal for real-time
and on-demand translation of web and

142
00:08:28.548 --> 00:08:31.560
app content that helps you
reach a global audience.

143
00:08:31.560 --> 00:08:35.817
It also allows you to perform batch
translations of pre-existing text.

144
00:08:35.817 --> 00:08:38.898
Amazon Translate integrates
with a wide variety

145
00:08:38.898 --> 00:08:43.792
of other AWS services allowing you to
extend the reach of your applications.

146
00:08:43.792 --> 00:08:48.641
The service is easy to get started
with and you can access it through

147
00:08:48.641 --> 00:08:53.153
the AWS Management Console,
AWS CLI, and through AWS SDKs.

148
00:08:53.153 --> 00:08:57.296
I hope you enjoyed this introduction to
Amazon Translate and that you found it

149
00:08:57.296 --> 00:09:01.645
helpful in finding the right translation
solution for your development needs.

150
00:09:01.645 --> 00:09:02.700
Thanks so much for watching.